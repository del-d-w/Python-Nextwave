01. Division With 17

Given a number N, write a program that reads N inputs and prints the number without decimals of the quotient of N inputs 
when each input is divided by 17, each on a new line.

Input
The first line of input contains an integer representing N.
The next N lines of input contain integers.

Output
The output should be N lines containing the number without decimals of the quotient of N inputs when each input is divided by 17, each on a new line.

Explanation:

For example, if the given number is N = 3,
The three inputs are 5, 98, and 376.
• The quotient when 5 is divided by 17 is 0.294. (5/17 = 0.294)
The number without decimals of 0.294 is 0.
• The quotient when 98 is divided by 17 is 5.764. ( 98/17 = 5.764)
The number without decimals of 5.764 is 5.
• The quotient when 376 is divided by 17 is 22.117. (376/17 = 22.117 )
• The number without decimals of 22.117 is 22.
The output should be
0
5
22

Sample Input 1:

3
5
98
376

Sample Output 1:

0
5
22

Sample Input 2:

5
34
57
76
23
-38

Sample Output 2:

2
3
4
1
-3

Solution:

number = int(input())
for each_number in range(number):
    value = int(input())
    quotient = value // 17
    print(quotient)

________________________________________________________________________________________________________________________________________________________________________

02. Double Char

Given a string, write a program to double all the characters in the given string.

Input
The input will be a single line containing a string.

Output
The output should be a single line containing a new string with all the characters doubled in the given string.

Explanation
For example, if the given string is "The", the output should be "TThhee".

Sample Input 1:

The

Sample Output 1:

TThhee

Sample Input 2:

Hello

Sample Output 2:

HHeelllloo

Solution:

word = input()
new_word = ""
for character in word:
    new_word = new_word + (character * 2)
print(new_word)

________________________________________________________________________________________________________________________________________________________________________

03. Seperate Characters With Comma

Given a string S, write a program that prints a string obtained by adding a comma( , ) between the characters of the given string S.

Input
The input will be a single line containing a string representing S.

Output
The output should be a single line containing a string obtained by adding a comma ( , ) between the characters of the given string S

Explanation:

For example, if the given string is S = "wonder"
Characters in the given string "wonder" are w, o, n, d, e and r.
• The string after adding a comma(,) between the characters of the string "wonder" is "w,o,n,d,e,r".
The output should be "w,o,n,d,e,r".

Java
C++

Sample Input 1:

wonder

Sample Output 1:

w,o,n,d,e,r

Sample Input 2:

sIng

Sample Output 2:

s,I,n,G

Solution:

string = input()
resultant_string = ""
for index in range(len(string)-1):
    resultant_string += string[index] + ","
resultant_string += string[len(string) - 1]

print(resultant_string)

________________________________________________________________________________________________________________________________________________________________________

04. Cumulative Sum

Given a number N, write a program to read N numbers and print the cumulative sum after each input, each on a new line.
Note: Cumulative sum is the sum of all the previous inputs and the current input.

Input
The first line of input contains an integer representing N.
The next N lines of input contain integers.

Output
The output should be N lines containing an integer that is the cumulative sum after each input, each on a new line.

Explanation
For example, if the given number is N = 5
• The 5 given inputs are 8, 11, -96, 49 and 85.
• The cumulative sum after each input is.

Input     Cumulative Sum
8             8
11            19 (8 + 11)
-96          -77 (8 + 11 - 96)
49           -28 (8 + 11 - 96 + 49)
85            57 (8 + 11 -96 + 49 + 85)

The output should be 

8
19
-77
-28
57

Sample Input 1:

5
8
11
-96
49
85

Sample Output 1:

8
19
-77
-28
57

Sample Input 2:

4
240
38
93
62

Sample Output 2:

240
278
371
433

Solution:

n = int(input())

total = 0
for i in range(n):
    number = int(input())
    total = total + number
    print(total)

________________________________________________________________________________________________________________________________________________________________________

05. Cumulative Average

Write a program to compute the cumulative average of the given N numbers after each input.
Cumulative average is the average of all the inputs read so far.

Input
The first line of input will contain a positive integer (N).
The following N lines will contain an integer in each line.

Output
The output should be N lines printing the cumulative average after each input in a new line.
Note: Round the averages to three decimal places.

Explanation:

Explanation
For example, if the given number is 5, then read the inputs in the next 5 lines and print the cumulative average after each input.
If the given numbers in the next five lines are 8, 11, -96, 49, and 85, the cumulative averages after each input are
8/1 = 8
(8+11)/2 = 9.5
(8 + 11+-96) / 3 = -25.667
(8+11 +-96 +49) / 4 = -7.0
(8+ 11+-96 +49 +85) / 5 = 11.4

So the output should be

8.0
9.5
-25.667
-7.0
11.4

Sample Input 1:

5
8
11
-96
49
85

Sample Output 1:

8.0
9.5
-25.667
-7.0
11.4

Sample Input 2:

4
240
38
93
62

Sample Output 2:

240.0
139.0
123.667
108.25

Solution:

n = int(input())

total = 0
for i in range(1, n+1):
    number = int(input())
    total = total + number
    average = total / i
    print(round(average, 3))

________________________________________________________________________________________________________________________________________________________________________

06. Smallest Among N Inputs

Given a number N write a program that reads N inputs and prints the Smallest Number of them after each input, each on a new line.

Input
The first line of input contains an integer representing N
The next N lines of input contain integers.

Output
The output should be N lines containing the Smallest Number of them after each input, each on a new line.

Explanation:

For example, if the given number is N = 3,
• The 3 inputs are 32, 6 and 29.
• The Smallest among the input 32 is 32.
• The Smallest among the inputs 32 and 6 is 6.
• The Smallest among the inputs 32, 6 and 29 is 6.
The output should  be,

32
6
6

Sample Input 1:

3
32
6
29

Sample Output 1:

32
6
6

Sample Input 2:

5
109
156
-129
96
210

Sample Output 2:

109
109
-129
-129
-129

Solution:

n = int(input())
smallest_number = 999999999
for num in range(n):
    number = int(input())
    if number < smallest_number:
        smallest_number = number
    print(smallest_number)

________________________________________________________________________________________________________________________________________________________________________

07. Hollow Pyramid - 3

Given a number N, write a program to print a Hollow Pyramid of2* N rows using pipes (), backward slashes ( \ ), and forward slashes ( / ).

|
| \
|  \
|   \
|   /
|  /
| /
|

Note: There is a space after every pipe (|).

Input
The input will be a single line containing an integer representing N.

Output
The output should be 2* N rows containing pipes (), backward slashes ( \ ), and forward slashes( / ) as a Hollow Pyramid shown in the sample output.

Explanation
For example, if the given number is N = 4,
• Print pipes (), backward slashes ( \ ), and forward slashes(/) on 8 ( 2 * 4 ) rows as shown in the given image.

https://assets.ccbp.in/frontend/content/programming-foundations/cx-hollow-pyramid-3.png

Note: In the Given image
• The emptybox indicates a space("")
• The Pipe in the box indicates the pipe and a space ("| ")

The output should be 

|
| \
|  \
|   \
|   /
|  /
| /
|

Sample Input 1:

4

Sample Output 1:

| 
| \ 
|  \ 
|   \ 
|   / 
|  / 
| / 
| 

Sample Input 2:

7

Sample Output 2:

| 
| \ 
|  \ 
|   \ 
|    \ 
|     \ 
|      \ 
|      / 
|     / 
|    / 
|   / 
|  / 
| / 
| 

Solution:

n = int(input())

for row in range(n):
    if row == 0:
        each_row = "|"
    else:
        spaces = " " * row
        each_row = "|" + spaces + "\\"
    print(each_row)
for row in range(n):
    if row == n - 1:
        each_row = "|"
    else:
        spaces = " " * (n - row - 1)
        each_row = "|" + spaces + "/"
    print(each_row)

----------------Another Method for Solution-----------------------------

n=int(input())
for i in range(n):
    for j in range(i+1):
        if j==0:
            print('|',end=' ')
        elif i==j:
            print('\\',end=' ')
        else:
            print('',end=' ')
    print()
for i in range(n):
    for j in range(n-i):
        if j==0:
            print('|',end=' ')
        elif i+j==n-1:
            print('/',end=' ')
        else:
            print('',end=' ')
    print()

________________________________________________________________________________________________________________________________________________________________________

08. subsequence

Given two strings, write a program to check if the second string is a subsequence of the first string.
A string can be considered subsequence of other if it can be derived from the original string by ignoring or removing some
characters without changing the order of the remaining characters.

Input
The first line of input will contain a string.
The second line of input will contain a string.

Output
The output should be a single line containing either "Yes" or "No".

Explanation:

For example, if the first string is "abcde" and the second string is "ace", the output should be "Yes", as the second string is a subsequence of the first string.

Whereas, if the first string is "Google", and the second string is "lg", the output should be "No", as the second string is not 
obtained by ignoring some characters without changing the order in the first string.

Sample Input 1:

abcde
ace

Sample Output 1:

Yes

Sample Input 2:

Google
lg

Sample Output 2:

No

Solution:

full_string = input()
subsequence = input()
subseq_index = 0
subseq_len = len(subsequence)
for char in full_string:
    if char == subsequence[subseq_index]:
        subseq_index += 1
        if subseq_index == subseq_len:
            break
if subseq_index == subseq_len:
    print("Yes")
else:
    print("No")

________________________________________________________________________________________________________________________________________________________________________

09. Identify the Mistake - Number Pyramid

Given the number of rows N, write a program to print the number pyramid pattern similar to the pattern shown below

    1
   212
  32123
 4321234
543212345

Input
The input will be a single line containing a positive integer (N).

Output
The output should be N rows containing the numbers in the pyramid pattern.

Explanation:

For example, if the given number is 5, the pattern should contain 5 rows as shown below

    1
   212
  32123
 4321234
543212345

Sample Input 1:

5

Sample Output 1:

    1
   212
  32123
 4321234
543212345

Sample Input 2:

3

Sample Output 2:

  1
 212
32123

Solution:

n = int(input())
for i in range(1, n+1):
    spaces = " "*(n - i)
    left_nums = ""
    right_nums = ""
    for j in range(1, i+1):
        left_nums = str(j) + left_nums
        right_nums = right_nums + str(j)
    print(spaces + left_nums + right_nums[1:])

________________________________________________________________________________________________________________________________________________________________________

10. Cumulative Sum

Write a program to compute the cumulative sum of the given N numbers after each input.
Cumulative sum is the sum of all the previous inputs and the current input.

Input:
The first line of input will contain a positive integer (N).
The following N lines will contain an integer in each line.

Output:
The output should be N lines printing the cumulative sum after each input in a new line.

Explanation:

For example, if the given number is 5, then read the inputs in the next 5 lines and print the cumulative sum after each input. 
If the given numbers in the next five lines are 8, 11, -96, 49, and 85, 
the cumulative sum after each input is

8
8 + 11 = 19
8 + 11 + -96 = -77
8 + 11 + -96 + 49 = -28
8 + 11 + -96 + 49 + 85 = 57

Sample Input 1:

5
8
11
-96
49
85

Sample Output 1:

8
19
-77
-28
57

Sample Input 2:

4
240
38
93
62

Sample Output 2:

240
278
371
433

Solution:

n = int(input())

total = 0
for i in range(n):
    number = int(input())
    total = total + number
    print(total)

________________________________________________________________________________________________________________________________________________________________________
