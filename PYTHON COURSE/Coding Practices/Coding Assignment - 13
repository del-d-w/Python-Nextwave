01. ﻿Pythagoras Triplets

Given a number N, write a program to print the count of Pythagorean triplets containing numbers A, B and C 
from 1 to N such that the sum of squares of the numbers A and B is equal B < C. to the square of C,
where A < B < C.

A is the first number, B is the second number, and C is the third number in a triplet.

Note:

A Pythagorean triplet is a set of three integers A, B, and C such that A2+ B2 = C2
﻿
Input:

The input will be a single line containing an integer representing N

Output:

The output should be a single line containing an integer which is the count of Pythagorean triplets whose 
sum of squares of numbers A and B is equal to the square of C.

Explanation:

For example, if the given number is N = 20,
The Pythagorean triplets such that A2+ B2 = C2 where A <B < C are,

(3, 4, 5),
(6, 8, 10),
(5, 12, 13),
(9, 12, 15),
(8, 15, 17),
(12, 16, 20)

The count of Pythagorean triplets whose sum of squares of numbers A and B is equal to
the square of C is 6.
The output should be 6.

Sample Input 1:

5

Sample Output 1:

1

Sample Input 2:

20

Sample Ouput 2:

6

Solution:

L=int(input())
count=0
for a in range(1,L-1):
    for b in range(a+1,L):
        for c in range(b+1,L+1):
            x=a*a
            y=b*b
            z=c*c
            if (x+y==z):
                count+=1
print(count)

__________________________________________________________________________________

02. ﻿Numbers in Inverted Right Angled Triangle - 3

Given two numbers S and N, write a program to print an Inverted Right Angled Triangle of N rows K+S -1 and ending with S.

K is the count of numbers that can be printed in N rows of an Inverted Right Angled Triangle.

For example, if the given number is S = 4 and the number of rows is N = 3,

• The count of numbers that can be arranged in an Inverted Right Angled Triangle of 3 rows is K = 6 ( 3+2 + 1 = 6).
• The starting number from which the numbers should be printed is K+S - 1 which is 9 (6 + 4-1).
So, the Inverted Right Angled Triangle should be printed with the numbers starting from 9 (K + S-1) 
and ending with 4 (S) in descending order as given below.

9 8 7
6 5
4

﻿Note:

There is a space after every number.

Input

The first line of input contains an integer representing S.
The second line of input contains an integer representing N.

Output

The output should be N rows containing numbers starting from K+ S-1 and ending with S as an 
Inverted Right Angled Triangle shown in the sample output.

﻿Explanation
For example, if the given numbers are S = 8 and N = 4,
• The count of numbers that can be arranged in an Inverted Right Angled Triangle of 4 rows is K = 10 ( 4+ 3+2+1 = 10).
The starting number from which the numbers should be printed is K+S-1 which is 17 ( 10 + 8-1).
• Print the numbers starting from 17 and ending with 8 (S) in descending order on 4 rows as shown in the given image.

https://assets.ccbp.in/frontend/content/programming-foundations/cx-numbers-in-inverted-right-angled-triangle-3.png

Note:

In the given image, the Number in the box indicates the number and space("17 ")

The Ouput should be 

17 16 15 14
13 12 11
10 9
8

Sample Input 1:

8
4

Sample Output 1:

17 16 15 14
13 12 11
10 9
8

Sample Input 2:

2
3

Sample Ouput 2:

7 6 5 
4 3 
2

Solution:

s=int(input())
n=int(input())
k=0
for i in range(1,n+1):
    k+=i
num=k+s-1
for i in range(n,0,-1):
    for j in range(i):
        print(num,end=" ")
        num-=1
    print()

_____________________________________________________________________________

03. Numbers in Inverted Pyrimad

Given a number N write a program to print an Inverted Pyramid of N rows using numbers starting from 1.

1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1

﻿
Input

The input will be a single line containing an integer representing N.

Output

The output should be N rows containing numbers starting from 1 as an Inverted Pyramid shown in the sample output.

Explanation

For example, if the given number is 5,
• Print the numbers on 5 rows as shown in the given image.
https://assets.ccbp.in/frontend/content/programming-foundations/cx-numbers-in-inverted-pyramid.png

Note:

In the given image
• Empty box indicates a space ("")
• The number in the box indicates a number ("1 ")

The output should be

1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1

Sample Input 1:

5

Sample Output 1:

1 2 3 4 5 
 1 2 3 4 
  1 2 3 
   1 2 
    1 

Sample Input 2:

3

Sample Ouput 2:

1 2 3 
 1 2 
  1 

Solution:

n=int(input())
for i in range(n):
    p=1
    for j in range(i):
        print(end=' ')
    for j in range(n-i):
        print(p,end=' ')
        p=p+1
    print()

________________________________________________________________________________

04. Number Diamond

Given a number N write a program to print a Diamond of 2*N-1 rows using numbers strating from 1

    1
   1 2
  1 2 3
 1 2 3 4
  1 2 3
   1 2
    1

Input:

The input will be a single line containing an integer representing 

Output:

The output should be 2*N-1 rows containing numbers starting from 1 as a Diamond shown in the sample output.

Explanation:

For example, if the given number is N = 5
Print the numbers on 9 ( 2 * 5 - 1 ) rows as shown in the given image.

https://assets.ccbp.in/frontend/content/programming-foundations/cx-number-diamond.png

Note:

In the given image
• Empty box indicates a space ("")
• The number in the box indicates a number ("1 ")

The output should be

    1
   1 2
  1 2 3
 1 2 3 4
1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1

Sample Input 1:

5

Sample Output 1:

    1
   1 2
  1 2 3
 1 2 3 4
1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1

Sample Input 2:

4

Sample Ouput 2:

   1 
  1 2 
 1 2 3 
1 2 3 4 
 1 2 3 
  1 2 
   1 

Solution:

"""n = int(input())
for i in range(1,n):
    spacess = " "*(n-i)
    pattern = ""
    for k in range(1,i+1):
        pattern = pattern+str(k)+" "
    print(spacess+pattern)
for row in range(1,n+1):
    i = n-(row-1)
    spacess = " "*(n-i)
    pattern =""
    for k in range(1,i+1):
        pattern = pattern+str(k)+" "
    print(spacess+pattern)
"""
n=int(input())
for i in range(n-1):
    p=1
    for j in range(n-i-1):
        print(end=' ')
    for j in range(i+1):
        print(p,end=' ')
        p=p+1
    print()
for i in range(n):
    p=1
    for j in range(i):
        print(end=' ')
    for j in range(n-i):
        print(p,end=' ')
        p=p+1
    print()

____________________________________________________________________________________

05. Indivisible Numbers

Given a number N, write a program that prints the count of numbers from 1 to N
that are not divisible by any of the following numbers 2,3,4,5,6,7,8,9,10

Input:

The input will be a single line containing an integer representing N.

Output:

The output should be a single line containing the count of numbers from 1 to N
that are not divisible by any of the following numbers 2, 3, 4, 5, 6, 7, 8, 9, 10

Explanation:

For example, if the given number is N = 11

• The numbers 1 and 11 are not divisible by any of the following numbers 2, 3, 4, 5, 6, 7, 8, 9, 10
• 2 numbers in the numbers from 1 to 11 are not divisible by any of the given numbers.

The output should be 2

Sample Input 1:

11

Sample Output 1:

2

Sample Input 2:

12

Sample Ouput 2:

2

Sample Input 3:

200

Sample Output 3:

47

Sample Input 4:

10

Sample Output 4:

1

Solution:

n=int(input())
count=0
for k in range(1,n+1):
    is_divisible=False
    for j in range(2,11):
        if(k%j==0):
            is_divisible=True
    if is_divisible==False:
        count=count+1
print(count)

___________________________________________________________________________________

06.﻿ Composite Numbers in the range

Given two numbers M and N, write a program to print all the composite numbers starting from M to N.

Note:

• 1 is neither prime nor composite.
• Composite numbers are numbers that have more than two factors.

For example, if the given number is 4.

The factors of 4 are 1,2 and 4.
There are more than two factors 4. So, 4 is a composite number.

Input:

The first line of input contains an integer representing M.
The second line of input contains an integer representing N.

Output:

The output should contain all the composite numbers from M to N, each on a new line.

Explanation:

For example, if the given numbers are M = 2 and N = 9,

• The composite numbers present in the range 2 to 9 are 4, 6, 8, 9. 
• The factors of 4 are 1, 2, and 4, 4 has more than 2 factors.
• The factors of 6 are 1, 2, 3, and 6, 6 has more than 2 factors.
• The factors of 8 are 1, 2, 4, and 8, 8 has more than 2 factors.
• The factors of 9 are 1, 3, and 9, 9 has more than 2 factors.

The output should be,

4
6
8
9

Sample Input 1:

2
9

Sample Output 1:

4
6
8
9

Sample Input 2:

1
4

Sample Ouput 2:

4

Solution:

M = int(input())
N = int(input())

for i in range(M,N+1):
    count = 0
    #divisor search, do not count the number itself and 1
    for j in range(2,i//2+1):
        if i%j == 0:
            count+=1
    if count >= 1:
        print(i)

___________________________________________________________________________________

07. Armstrong numbers between two intervals

Given two numbers M and N, write a program to print all the Armstrong Numbers starting from M to N.
If there are no Armstrong numbers, print -1.
﻿
Note:

A number N is an Armstrong Number, if the sum of each digit to the power of L is equal to N. Lis the count of digits in N
For example if the given number N = 153,
• The number 153 has 3 digits 1, 5 and 3.
• The sum of each digit in 153 to the power of 3 is 153. ((13) + (53) +(33))
The sum of each digit in 153 to the power of 3 is equal to 153.
So, 153 is an Armstrong Number.

Input:

The first line of input contains an integer representing M. The second line of input contains an integer representing N.

Output:

The output should contain all the Armstrong numbers from M to N, separated by a space. 
If there are no Armstrong numbers, print -1.

Explanation:

For example, if the given numbers are M = 300 and N = 500,
• The Armstrong Numbers between 300 to 500 are 370, 371 and 407.
• The number 370 is an Armstrong number because,
    • The number 370 has 3 digits 3, 7 and 0.
    • The sum of each digit in 370 to the power of 3 is 370. ((33) + (73) +(03))
• The number 371 is an Armstrong number because,
    • The number 371 has 3 digits 3, 7 and 1.
    • The sum of each digit in 371 to the power of 3 is 371. ((33) + (73) +(13))
• The number 407 is an Armstrong number because,
    • The number 371 has 3 digits 4, 0 and 7.
    • The sum of each digit in 407 to the power of 3 is 407. ((43) + (03) +(73))

So, the output should be 370 371 407

For example, if the given numbers are M = 10 and N = 150,

• There is no Amstrong number between 10 and 150.

So, the output should be -1.

Sample Input 1:

150
200

Sample Output 1:

153

Sample Input 2:

1
3

Sample Ouput 2:

1 2 3 

Solution:

"""A=int(input())
B=int(input())
count=0
for i in range(A, B+1):
    x = len(str(i))
    sum1 = 0
    temp = i
    while temp > 0:
        digit = temp % 10
        sum1 += digit ** x
        temp //= 10
    if i == sum1:
        print(i,end=" ") 
        count=count+1
if count==0:
    print(-1)"""
a=int(input())
b=int(input())
count1=0
for i in range(a,b+1):
    count=0
    for j in str(i):
        a=int(j)**len(str(i))
        count+=a
    if int(count)==i:
        print(count,end=" ")
        count1+=1
if count1==0:
    print(-1)
        
___________________________________________________________________________________

08. ﻿Half Pyramid - 4

Given an integer N as a starting number and K as input, write a program to print a number pyramid of K rows as shown below.

Input

The first line of input is an integer N
The second line of input is an integer K.

Explanation

In the example, the given starting number is 10, and the number of rows in the pyramid is 5.

So, the output should be

24 
23 22 
21 20 19 
18 17 16 15 
14 13 12 11 10

Sample Input 1:

10
5

Sample Output 1:

24 
23 22 
21 20 19 
18 17 16 15 
14 13 12 11 10 

Sample Input 2:

1
3

Sample Ouput 2:

6 
5 4 
3 2 1

Solution:

n=int(input())
m=int(input())
p=n
for i in range(m):
    p=p+i
k=m+p
for i in range(m):
    for j in range(i+1):
        print(k-1,end=" ")
        k=k-1
    print()
"""n = int(input())
k = int(input())
c = n-1
for i in range(k):
    for j in range(i+1):
        c = c+1 
for i in range(k):
    for j in range(i+1):
        print(c,end=" ")
        c=c-1
    print()"""

__________________________________________________________________________________________________________
